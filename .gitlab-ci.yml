# File: feathers-keycloak-listener/.gitlab-ci.yml

image: registry.gitlab.com/avcompris/kalisio/avc-kalisio-workspace/avcompris/kalisio-workspace
variables:
  DOCKER_HOST: tcp://172.17.0.1:2375

stages:
  - build
  - test

install:
  stage: build
  only:
    - master
    - tags
  script:
    - yarn install
    - yarn link

mocha:
  stage: test
  only:
    refs:
      - master
  artifacts:
    when: always
    paths:
      - test/screenshots
  before_script:
    - cd ${CI_PROJECT_DIR}/test
    - docker-compose down
    - docker-compose up -d mongo frontend keycloak selenium
    - ../scripts/wait_for_docker_container.sh test_mongo_1 "waiting for connections on port 27017"
    - ../scripts/wait_for_docker_container.sh test_frontend_1 "Transpiled JS"
    - ../scripts/wait_for_docker_container.sh test_keycloak_1 "Running the server in development mode."
    - ../scripts/wait_for_docker_container.sh test_selenium_1 "Started Selenium Standalone"
  script:
    - cd ${CI_PROJECT_DIR}/test
    - npm install
    - export SELENIUM_REMOTE_URL=http://172.17.0.1:4444/wd/hub
    
    # Set up Keycloak with a "Kalisio" realm, the Java plugin, a client, 2 users
    - npx mocha keycloak_setUp.js
    - export KEYCLOAK_CLIENT_SECRET=`jq -r .clientSecret cache.json`
    - |
      echo "KEYCLOAK_CLIENT_SECRET: ${KEYCLOAK_CLIENT_SECRET}"

    # We need KEYCLOAK_CLIENT_SECRET to start the API
    - |
      docker-compose up -d \
          -e KEYCLOAK_CLIENT_SECRET=${KEYCLOAK_CLIENT_SECRET} \
          api
    - ../scripts/wait_for_docker_container.sh test_api_1 "Server started listening"

    # These three tests do not use the user created in the kApp by the Java plugin
    - npx mocha kApp_login_as_kalisio.js
    - npx mocha kApp_login_as_kalisio_through_keycloak.js

    - |
      export KAPP_ACCESS_TOKEN=`curl \
           --location 'http://localhost:8082/api/authentication' \
           --header 'Content-Type: application/json' \
           --data-raw '{
                 "strategy": "local",
                 "email": "kalisio@kalisio.xyz",
                 "password": "Pass;word1"
             }' \
         | jq -r .accessToken`
    - |
      echo "KAPP_ACCESS_TOKEN: ${KAPP_ACCESS_TOKEN}"
    - export KAPP_ACCESS_TOKEN

    # Create a new user in Keycloak, in the "Kalisio" realm
    # We also inject the kApp accessToken in this test
    - npx mocha keycloak_create_new_user.js
    
    # These two tests use the user created in the kApp by the Java plugin
    - npx mocha kApp_login_with_new_user_through_keycloak.js
    - npx mocha kApp_login_with_new_user.js

    # Remove the "Kalisio" realm in Keycloak
    - npx mocha keycloak_tearDown.js

  after_script:
    - cd ${CI_PROJECT_DIR}/test
    - docker-compose down
